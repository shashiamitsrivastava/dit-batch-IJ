class Solution {
    //Integer cache[];
     public int coinChange(int[] coins, int amount) {
        // cache = new Integer[amount + 1]; // fill with null
        // return coinChangeHelper(coins, amount);

        // Bottom Up
        int result [] = new int[amount + 1];
        Arrays.fill(result, amount + 1);
        // Base case
        result[0] = 0;
        for(int i = 1; i<=amount; i++){
            for(int coin : coins){

            if(i - coin < 0 ){
                continue;
            }
            result[i] = Math.min(result[i], result[i - coin]+1);
            }
        }
        return result[amount] == amount + 1 ? -1 : result[amount];
     }
    /*public int coinChangeHelper(int[] coins, int amount) {
        if(amount < 0){
            return -1;
        }
        if(amount == 0){
            return 0;
        }
        if(cache[amount]!=null){
            return cache[amount];
        }
        int minCount = Integer.MAX_VALUE;
        for(int coin : coins){
                int count = coinChangeHelper(coins, amount - coin);
                if(count == -1){
                    continue;
                }
                minCount = Math.min(minCount, count + 1);
                

        }
          cache[amount] =  minCount == Integer.MAX_VALUE?-1:minCount;
        
                return cache[amount];
        
    }*/
}
