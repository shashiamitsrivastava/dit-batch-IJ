class Solution {

    public int lengthOfLIS(int[] nums) {
       int len = nums.length;
       int dp [] = new int[len]; // array by default fill 0
       Arrays.fill(dp , 1);
       int result = 1;
       for(int i = 0; i<len; i++){
        for(int j = 0; j< i; j++){
            if(nums[i]>nums[j]){
                dp[i] = Math.max(dp[i], dp[j]+1);
                result = Math.max(result, dp[i]);
            }
            // RR
                //result = Math.max(result, helper(nums, j)+1);

        }
       }
       return result;
    }

    // Top Down Approach
    /*Map<Integer, Integer> cache = new HashMap<>();

    public int lengthOfLIS(int[] nums) {
        int result = 0;
        for(int i = 0 ; i<nums.length; i++){
            // SubSequence Length , that would be the Max One
            result = Math.max(result,helper(nums, i));
            
        }
        return result;
    }

   int helper(int[] nums,  int i){
    if(cache.containsKey(i)){
        return cache.get(i);
    }
    int result = 1;
        for(int j = 0; j<i ; j++){
            if(nums[i] > nums[j]){
                // it is part of Subsequence
                result = Math.max(result, helper(nums, j)+1);
                
            }
        }
        cache.put(i, result);
        return result;
    } */
}
