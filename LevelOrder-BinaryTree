import java.util.Scanner;
import java.util.LinkedList;
import java.util.Queue;
class BinaryTreeNode<T>{
    T data;
    BinaryTreeNode<T> left;
    BinaryTreeNode<T> right;
    BinaryTreeNode(T data){
        this.data = data;
    }
}
class BinaryTreeOperations{
    String nodeName = "parent";
    Scanner scanner = new Scanner(System.in);
    BinaryTreeNode<Integer> add(){
        System.out.println("Enter the node data in a tree for "+nodeName);
        int data = scanner.nextInt();
        if(data == -1){
            return null;
        }
        BinaryTreeNode<Integer> newNode = new BinaryTreeNode<>(data);
        nodeName = "left";
        newNode.left = add();
        nodeName = "right";
        newNode.right = add();
        nodeName = "parent";
        return newNode;

    }
    void levelOrder(BinaryTreeNode<Integer> root){
        Queue<BinaryTreeNode<Integer>> queue = new LinkedList<>();
        queue.offer(root); 
        int level=0;
        while(!queue.isEmpty()){
            int size = queue.size();
            System.out.print("Level "+level+" : ");
            for(int i = 0; i<size; i++){
                BinaryTreeNode<Integer> node = queue.poll();
                System.out.print(node.data+" ");
                if(node.left!=null){
                    queue.offer(node.left);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                }
            }
            level++;
            System.out.println();
            
            
            
        }   
    }

    void preOrder(BinaryTreeNode<Integer> parent){
        // Base Case
        if(parent == null){
            return ;
        }
        // print parent
        System.out.println(parent.data);
        // move to left
        preOrder(parent.left);
        //move to right
        preOrder(parent.right);
    }
    void inOrder(BinaryTreeNode<Integer> parent){
        // Base Case
        if(parent == null){
            return ;
        }
        // go to left
        inOrder(parent.left);
        // print parent
        System.out.println(parent.data);
        // go to right
        inOrder(parent.right);
    }

    void postOrder(BinaryTreeNode<Integer> parent){
        // Base case
        if(parent == null){
            return ; 
        }
        // go to left
        postOrder(parent.left);
        // go to right
        postOrder(parent.right);
        // print parent
        System.out.println(parent.data);
    }
    void print(BinaryTreeNode<Integer> root){
        // Base Case
        if(root == null){
            return ;
        }
        String result = "";

        // Traverse the parent
        int parent = root.data;
        result += "P => "+parent;
        // Traverse in Left
        if(root.left!=null){
            int leftData = root.left.data;
            result += " L => "+leftData;
        }
        // Traverse in Right
        if(root.right!=null){
            int rightData = root.right.data;
            result += " R => "+rightData;
        }
        System.out.println(result);
        print(root.left);
        print(root.right);
    }
}
public class BinaryTreeDemo {
    public static void main(String[] args) {
        BinaryTreeOperations opr = new BinaryTreeOperations();
        BinaryTreeNode<Integer> root = opr.add();
        opr.levelOrder(root);
        // opr.print(root);

    }
}
