class Solution {
    public int[] productExceptSelf(int[] nums) {
        // Compute Prefix Product for Left to right product
        // Compute Suffix Product for Right to Left Product
        // finally the answer left and right 
        // Approach - 1 Prefix and Suffix Array
        // int left[] = new int[nums.length]; // Prefix Product
        // int right[] = new int[nums.length]; // Suffix Product
        // int finalAns [] = new int[nums.length];
        // left[0] = 1;
        // for(int i = 1; i<nums.length; i++){
        //     left[i] = left[i-1] * nums[i-1];
        // }
        // right[right.length-1] = 1;
        // for(int i = right.length-2; i>=0 ; i--){
        //     right[i] = right[i+1] * nums[i+1];
        // }
        // for(int i = 0; i<finalAns.length; i++){
        //     finalAns[i] = left[i] * right[i];
        // }
        // return finalAns;

        // Approach - 2
        
        int finalAns [] = new int[nums.length];
        finalAns[0] = 1;
        // Compute Prefix Product
        for(int i = 1; i<finalAns.length ; i++){
            finalAns[i] = finalAns[i-1] * nums[i-1]; 
        }
        // Compute Suffix Product
        int right = 1;
        for(int i = finalAns.length - 1; i>=0; i--){
            finalAns[i] = finalAns[i] * right;
            right = right * nums[i];
        }
        return finalAns;

    }
}
