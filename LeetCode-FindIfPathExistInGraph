class Solution {
    public boolean validPath(int n, int[][] edges, int source, int destination) {
        // BFS
         List<List<Integer>> adjList = new ArrayList<>();
        for(int i =0; i<n; i++){
            adjList.add(new ArrayList<>());
        }

        for(int edge [] : edges){
            adjList.get(edge[0]).add(edge[1]);
            adjList.get(edge[1]).add(edge[0]);
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.offer(source);
        boolean visited [] = new boolean [n]; // fill with false
        while(!queue.isEmpty()){
            int node = queue.poll();
            if(node == destination){
                return true;
            }
            
            // explore the neighbour
            for(int neighbour : adjList.get(node)){
                if(!visited[neighbour]){
                    queue.offer(neighbour);
                    visited[neighbour] = true;
                }
                    
            }

        }
        return false;


        // DFS
        // List<List<Integer>> adjList = new ArrayList<>();
        // for(int i =0; i<n; i++){
        //     adjList.add(new ArrayList<>());
        // }

        // for(int edge [] : edges){
        //     adjList.get(edge[0]).add(edge[1]);
        //     adjList.get(edge[1]).add(edge[0]);
        // }
        // Stack<Integer> stack = new Stack<>();
        // stack.push(source);
        // boolean visited [] = new boolean [n]; // fill with false
        // while(!stack.isEmpty()){
        //     int node = stack.pop();
        //     if(node == destination){
        //         return true;
        //     }
        //     if(visited[node]){
        //         continue;
        //     }
        //     visited[node] = true;
        //     // explore the neighbour
        //     for(int neighbour : adjList.get(node)){
        //             stack.push(neighbour);
        //     }

        // }
        // return false;

    }
}
