class Solution {
    Map<Integer, Integer> memo = new HashMap<>();
    public int fib(int n) {
        if(n==0){
            return 0;
        }
        // Bottom Up Approach (iterative) (recurance relation) (small to big)
        int arr[] = new int [n  + 1];
        // take care base case
        // arr[0] = 0;
        arr[1] = 1;
        for(int i = 2; i<=n; i++){
            int firstTerm = arr[i-1];
            int secondTerm = arr[i-2];
            int thirdTerm = firstTerm + secondTerm;
            arr[i] = thirdTerm;
        }
        return arr[n];

 
         /* Top Down Approach (Memoization) (big to small (base case))
         if(n==0 || n==1){
            return n;
        }
        // Before Compute
        // check the result of nth term is exist in memo or not
        if(memo.containsKey(n)){
            return memo.get(n); // stored result give the result
        }

        int firstTerm = fib(n-1);
        int secondTerm = fib(n-2);
        int thirdTerm = firstTerm + secondTerm;
        memo.put(n, thirdTerm); // store in cache
        return memo.get(n); */
    }
}
